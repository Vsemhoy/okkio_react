import { useState, useEffect } from "react";

export const useLayoutStorage = () => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [storage, setStorage] = useState(() => {
    try {
      const saved = localStorage.getItem('layout');
      return saved ? JSON.parse(saved) : {
        events: {},
        openSidebar: false,
        eventorFlowDirection: 0
      };
    } catch (e) {
      console.error("Failed to parse localStorage", e);
      return {
        events: {},
        openSidebar: false,
        eventorFlowDirection: 0
      };
    }
  });

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
  useEffect(() => {
    const handleStorageChange = (e) => {
      if (e.key === 'layout') {
        try {
          const newValue = e.newValue ? JSON.parse(e.newValue) : null;
          if (newValue) {
            setStorage(prev => ({
              ...prev,
              ...newValue
            }));
          }
        } catch (error) {
          console.error("Storage parse error:", error);
        }
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    localStorage.setItem('layout', JSON.stringify(storage));
  }, [storage]);

  // üîπ –ì–µ—Ç—Ç–µ—Ä—ã
  const getOpenSidebar = () => {
    const saved = localStorage.getItem('layout');
    if (saved ){
        return JSON.parse(saved)?.openSidebar;
    } else {
        return false;
    }
  };
  const getEventorFlowDirection = () => storage.eventorFlowDirection ?? 0;

  // üîπ –°–µ—Ç—Ç–µ—Ä—ã
  const setOpenSidebar = (value) => {
    const newValue = Boolean(value);
    setStorage(prev => {
        // üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ –∂–µ
        const newState = { ...prev, openSidebar: newValue };
        localStorage.setItem('layout', JSON.stringify(newState));
        return newState;
    });
};
//   const setOpenSidebar = (value) => {
//     setStorage(prev => {
//       const newState = { ...prev, openSidebar: Boolean(value) };
//       localStorage.setItem('layout', JSON.stringify(newState));
//       return newState;
//     });
//   };

  const setEventorFlowDirection = (value) => {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 0 –¥–æ 2)
    const clampedValue = Math.max(0, Math.min(2, Number(value)));
    setStorage(prev => {
      const newState = { ...prev, eventorFlowDirection: clampedValue };
      localStorage.setItem('layout', JSON.stringify(newState));
      return newState;
    });
  };

  // üîπ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
  const getEvents = () => Object.values(storage.events || {});

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    storage,

    // –ì–µ—Ç—Ç–µ—Ä—ã
    getOpenSidebar,
    getEventorFlowDirection,
    getEvents,

    // –°–µ—Ç—Ç–µ—Ä—ã
    setOpenSidebar,
    setEventorFlowDirection,

    // –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    setStorage,
  };
};